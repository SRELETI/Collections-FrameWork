
Why Collections are needed?

Different ways to initialize 10,000 objects in java.

1) declare and initialize 10,000 variables
2) declare an array of size 10,000.

Problems with first approach-its a very bad coding practice and dims readability.
Problems with second approach:
  1) Fixed size
  2) Can store only homogeneous items
  3) No underlying datastructure. So predefined methods. Everything has to be implemented by the programmer.
  
Solution:

Collections:
  1) Growable innature
  2) Homogeneous and hetrogeneous
  3) Underlying datastructure, So predefined methods.

Difference Between Arrays and Collections?

Arrays:
  1) Fixed in nature
  2) Recommended - interms of performance
  3) Not Recommended - interms of memory
  4) No predefined methods
  5) Homogeneous
  6) Works for both Primitive and objects

Collections:
  1) Growable
  2) Recommended - interms of memory
  3) Not Recommended - interms of performance
  4) Predefined methods
  5) Hetrogeneous and Homogeneous (In TreeSet and TreeMap, only homogeneous items can be inserted as the elements should be of same type to be comparable)
  6) Works for only Objects

Collection: group of individual objects represented as a single entity.
Collections Framework: classes and interfaces required to represent group of individual objects as a single entity.

Collection vs Collections:

Collection is an interface in the collections framework
Collections is a utility class for collections. It contains methods for sorting, searching etc.

Interfaces in Collections Framework:


  1)Collection 
  2)List                 -- Allows Duplicates, preserves insertion order
  3)Set                  -- Doesn't allow duplicates, doesn't preserve insertion order
  4)SortedSet            -- Doesn't allow duplicates, inserts in some sorted order
  5)NavigableSortedSet   -- Doesn't allow duplicates, inserts in some sorted order and contains methods for navigating over the set
  
  6)Queue                  
  7)Map                  -- Stores key value pairs.
  8)SortedMap            -- Stores key value pairs with keys sorted in some order
  9)NavigableSortedMap   -- Stores key value pairs with keys sorted in some order, and contains methods for navigating over the Set


Implementations of each Interface:

  1) List        ---    ArrayList, LinkedList, Vector, Stack
  2) Set         ---    HashSet, LinkedHashSet
  3) NavigableSortedSet --- TreeSet
  4) Queue       ---    PriorityQueue, BlockingQueue
  5) Map         ---    HashMap, LinkedHashMap, WeakHashMap, IdentityHashMap
  6) NavigableSortedMap --- TreeMap
  
  Utility Classes in Collections Framework:
  
   1) Arrays - contains methods to work on array objects
   2) Collections - contains methods to work on all Collection objects
   
   Different Cursors in Collections Framework:
   
   1) Enumerator
   2) Iterator
   3) ListIterator

When a collection is printed, then the toString() method is called and the collection is printed.

  Methods in Collection Interface:
    It contains the most common methods which are applicable to all the collections, as it is considered as the root interface in the collections framework.
    
    add(Object o)
    addAll(Collection c)
    remove(Object o)
    removeAll(Collection c)
    clear()
    retainAll(Collection c)
    isEmpty()
    size()
    contains(Object o)
    containsAll(Collection c)
    iterator()
    toArray()

 Methods in List Interface:
    It is the child interface of Collection interface. 
    Underlying DS used is Array.
    Order is preserved. It is done with the help of array indices
    
    add(int index, Object o)
    addAll(int index, Collection c)
    remove(int index, Object o)
    indexOf(Object c)
    lastIndexOf(Object c)
    get(int index)
    set(int index, Object o)
    listIterator()
  
Implementations of List
  
  ArrayList:
    Underlying DS is resizeable array
    Duplicates allowed
    Preserves insertion order
    Hetrogeneous
    "null" can  be inserted
 Constructors:
  
    ArrayList al = new ArrayList();
      Creates a list of initial size 10.
    ArrayList al = new ArrayList(size);
      Creates a list of initial size "size"
    ArrayList al = new ArrayList(Collection );
      Creates a list from the collection.
    
    When the arraylist is full, then the list is expanded by creating a new list of size (old_size*3/2)+1 and copying the old elements into the new list.
   
  All the collections implement the Serializable and Cloneable interfaces as the collections are used for holding and transfering data over the network.
  
  The ArrayList and Vector classes implement RandomAccess interface, as it provides access to any of the elements in same time.
  
  When to use ArrayList:
    If the frequent operation is retrival
  When not to use ArrayList:
    If the frequent operation is insertion or deletion
  
  ArrayList is not Synchronized and hence it is not thread safe
  To get a synchronized ArrayList, we can use the getSerializedList() method in Collections class
  
  
  LinkedList:
  
  1) Underlying datastructure is DLL
  2) Duplicates allowed
  3) insertion order preserved
  4) null insertion allowed
  
  Constuctors:
  LinkedList ll = new LinkedList();
  LinkedList ll2 = new LinkedList(Collection c);
  
  Use of LinkedList is most appropriate when the frequent operation is insertion/deletion at a particular index
  Not recommended, when the frequent operation is retrieval.
  
  Linked list implements serializable and clonable interfaces
  LinkedList doesnt implement RandomAccess and synchronized interfaces. LinkedList is not thread safe
  
  Vector:
  
  Vector is a legacy class. Everything in vector is similar to ArrayList except that Vector is thread safe i.e, it is synchronized.
  
  Vector has a extra constructor apart from the three that are present in ArrayList
  
  Vector v = new Vector(int initialCapacity, int incremental);
  
  Stack:
  
  Stack is a child class of Vector. It has special methods to support LIFO principle. 
  
  Cursors in Collections Framework:
  
  Enumerator
  Iterator
  ListIterator
  
  Enumerator enum = legacyClass.elements(); enumerator object can be created by calling the elements method in the legacy classes.
      Enumerator is applicable only to legacy classes. It has two methods, hasMoreElements, nextElements. It provides read only access on the collection and also moves only in forward direction
      
  
  Iterator itr = Iterator.iterator(); Iterator can be created by calling iterator() method. It is a universal cursor which is applicable to all the collections.
      Iterator has three methods, hasNext(), next(), remove(). It provides read access and also remove access on the collection. Moves only in forward direction.
  
  ListIterator litr = ListIterator.iterator(). Iterator can be by calling iterator() method. it is applicable to only classes implementing List interface. It has readAccess, replace, remove and add access.
      it moves in forward and backward direction. 
    
  
  The Enumerator, Iterator, ListIterator interfaces are implemented by classes written inside the elements(), iterator() method. 
  
  
  Set Interface:
  
  Set interface doesnt define any new methods
  
  Classes implementing set Interface:
  
  HashSet:
    1. underlying datastructure is Hashtable
    2. Duplicates not allowed
    3. insertion order not preserved. inserted according to hashCode
    4. null possible
    5. Hetrogeneous
    6. Serializable and Clonable
    7. Not synchronized
    
  Constructors:
    HashSet st = new HashSet(); Default capacity: 16 load factor:0.75
    HashSet st = new Hashset(int initialCapacity) Same load factor
    HashSet st = new HashSet(int initialCapacity, float loadFactor)
    HashSet st = new HashSet(Collection c) 
 
  LinkedHashSet: 
    LinkedHashSet can be used if the insertion order has to be preserved.
    
    1. Underlying datastructure, hashtable+Linkedlist
    2. duplicates allowed
    3. insertion order preserved
    4. null possible
    5. hetrogeneous
    6. Serializable and clonable
    7. Not Synchronized
  
   Ideal datastructure for developing cache based applicatins. Example LRU cache algorithm
   
   SortedSet Interface:
     SortedSet interface implements some specific methods as it sorts the elements in some order. 
     Default sorting order is ascending for numbers and alphabetical for strings
     
     The methods are:
      first()  - first element in the list
      last()  - last element in the list
      headSet() - elements less than given element
      tailSet() - elements greater than given element
      subSet() - elements in between the given range
      Comparator() - returns the sorting order.
    
    
